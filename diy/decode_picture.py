inputBytes = [
0xff,
0x00,
0x80,
0x00,
0xc0,
0x00,
0xe0,
0x00,
0xf0,
0x00,
0xf8,
0x00,
0xfc,
0x00,
0xfe,
0x00,
0xff,
0x00,
0x7f,
0x00,
0x3f,
0x00,
0x1f,
0x00,
0x0f,
0x00,
0x07,
0x00,
0x03,
0x00,
0x01,
0x00,
0xff,
0x00,
0xff,
0xff,
0x00,
0x00,
0x00,
0x00,
0xff,
0x00,
0xff,
0xff,
0x01,
0x00,
0x00,
0x01,
0xff,
0x00,
0xff,
0xff,
0x06,
0x00,
0x00,
0x06,
0xff,
0x00,
0x80,
0x80,
0x35,
0xc0,
0xe0,
0xf0,
0xf8,
0xfc,
0xfe,
0xff,
0x00,
0xff,
0x08,
0x14,
0xe3,
0x00,
0x00,
0x00,
0xf8,
0x88,
0x88,
0x00,
0xf8,
0x00,
0x00,
0x00,
0xf8,
0x88,
0x88,
0x01,
0x00,
0x00,
0x00,
0xf8,
0x10,
0x20,
0x10,
0xf8,
0x00,
0x00,
0x00,
0xf8,
0x88,
0x88,
0x00,
0xf8,
0x00,
0x00,
0x00,
0xf8,
0x88,
0x88,
0x01,
0x00,
0x00,
0x66,
0xe0,
0x10,
0x08,
0x08,
0x00,
0x0c,
0x04,
0x04,
0x02,
0x8c,
0x8c,
0x00,
0x04,
0x46,
0x4a,
0x4a,
0x00,
0x53,
0xf1,
0x51,
0x41,
0x40,
0x40,
0x01,
0x00,
0x00,
0x69,
0x01,
0x02,
0x02,
0x00,
0x06,
0x06,
0x00,
0x04,
0x04,
0x01,
0x06,
0x07,
0x0f,
0x0e,
0x0a,
0x12,
0x11,
0x30,
0x20,
0x20,
0x00,
0x00,
0x00,
0x7a,
0xff,
0x01,
0x01,
0x00,
0xff,
0x00,
0x00,
0x00,
0xff,
0x81,
0x81,
0x01,
0x00,
0x00,
0x00,
0x04,
0x02,
0xff,
0x00,
0x00,
0x80,
0x1f,
0x10,
0x10,
0x00,
0xff,
0x00,
0x00,
0x00,
0xff,
0x81,
0x81,
0x00,
0xff,
0x00,
0xfc,
0x20,
0x50,
0x8c,
0x00,
0x04,
0xfc,
0x04,
0x00,
0xbc,
0x64,
0xfc,
0x00,
0xfc,
0xa4,
0xe4,
0x00,
0xfc,
0x24,
0x3c,
0x00,
0xbc,
0x64,
0xfc,
0x00,
0x00,
0x80,
0x04,
0x02,
0xff,
0x00,
0x00,
0x00,
0x9f,
0x91,
0x91,
0x00,
0xff,
0x00,
0x00,
0x00,
0x9f,
0x91,
0x91,
0x00,
0xf1,
0x00,
0x00,
0x00,
0x01,
0x01,
0x00,
0xf1,
0x0f,
0x00,
0x00,
0x8d,
0xf8,
0xa8,
0x88,
0x00,
0x80,
0x00,
0xf8,
0x80,
0xc0,
0x00,
0x80
]

# rather arbitrary, I know
width = 128

# WARNING GLOBALS BELOW

# as composed from 64 lines of pixxxels
screen = []

x = 0
y0 = 0

def addEightLines():
    global screen
    for i in range(8):
        screen.append("")

# write a byte as bits, thus to 8 lines
def outputByte(toOutput):
    global screen
    global x
    global y0

    alreadyLines = len(screen)
    if (alreadyLines <= y0):
        if (alreadyLines < 64):
            # before we fill 64 lines, just go at it
            addEightLines()
        else:
            # gracefully allow padding if it is padded with 0x00
            if(toOutput == "00000000"):
                print("Padding detected, ignoring")
                return
            else:
                print("WARNING, overrun")
                addEightLines()

    # k is the bit in byte
    for k in range(0,8):
        screen[y0 + k] += toOutput[7 - k]
        
    # move to next x ...
    x = x + 1
    
    # until arrive to end of line, then move to next 8 lines
    if (x == width):
        x = 0
        y0 = y0 + 8

# these should not appear since values are always composed of 1s and 0s
twoBefore = "zzzzzzzz"
oneBefore = "yyyyyyyy"

for byteIndex in range(len(inputBytes)):
    actual = inputBytes[byteIndex]
    
    # take binary form, remove 0b prefix
    binary = bin(actual)[2:]
    # fill up to 8 bits
    binary = "0" * (8 - len(binary)) + binary
    
    print("Consuming byte " + str(byteIndex) + " with value of " + str(actual) + " / " + binary)

    if (twoBefore == oneBefore):
        print("Found repeat instruction, printing repeats")
        for i in range(actual):
            outputByte(oneBefore)
        # reset repeats detection
        twoBefore = "zzzzzzzz"
        oneBefore = "yyyyyyyy"
    else:
        print("Found regular, printing as is")
        outputByte(binary)
        # do not forget to shift both detections
        twoBefore = oneBefore
        oneBefore = binary

print("Result is")

for l in range(len(screen)):
    print(screen[l].replace("0", "░").replace("1", "█"))

print("Done")
